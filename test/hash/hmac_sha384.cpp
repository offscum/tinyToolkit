/**
 *
 * 作者: hm
 *
 * 说明: hmac_sha384
 *
 */


#include "hmac_sha384.h"


TOOLKIT_TEST_CASE(HMAC_SHA384, Char)
{
	std::vector<std::string> src{ "123", "abc", ";'.", "#$%" };
	std::vector<std::string> dst
	{
		"A534F68F5CFAD559B6C2B65771C30016E853DFB678909790397938BC24B8985FA561BC3B28145560C0D3D2A59240C248",
		"F2BD99E06F5E07F84C7E3AD9F8A68E4D3AA9A0B2877CA833381584096FBEDCA96FC0E05767EFECA98ED79D98E8EB3632",
		"6C61290A6D46A20E4E261B116DB3752521BCADBA041D527E5E44E9D547CB6787A70748A45DEEA5E96444A3166625862E",
		"366694204A5E70877A8D65D4AA9A1737768D27831ADB8E43EC80D6E5D3908A71CA64CA79CDE3D422913D46E770A18DD2"
	};

	tinyToolkit::hash::HMAC_SHA384 handle{ };

	handle.SetKey("fuck");

	for (std::size_t i = 0; i < 4; ++i)
	{
		handle.Append(src[i].c_str());

		TOOLKIT_EXPECT_STR_EQ(handle.Result(), dst[i]);
	}
}

TOOLKIT_TEST_CASE(HMAC_SHA384, UChar)
{
	std::vector<std::string> src{ "123", "abc", ";'.", "#$%" };
	std::vector<std::string> dst
	{
		"A534F68F5CFAD559B6C2B65771C30016E853DFB678909790397938BC24B8985FA561BC3B28145560C0D3D2A59240C248",
		"F2BD99E06F5E07F84C7E3AD9F8A68E4D3AA9A0B2877CA833381584096FBEDCA96FC0E05767EFECA98ED79D98E8EB3632",
		"6C61290A6D46A20E4E261B116DB3752521BCADBA041D527E5E44E9D547CB6787A70748A45DEEA5E96444A3166625862E",
		"366694204A5E70877A8D65D4AA9A1737768D27831ADB8E43EC80D6E5D3908A71CA64CA79CDE3D422913D46E770A18DD2"
	};

	tinyToolkit::hash::HMAC_SHA384 handle{ };

	handle.SetKey("fuck");

	for (std::size_t i = 0; i < 4; ++i)
	{
		handle.Append(reinterpret_cast<const uint8_t *>(src[i].c_str()));

		TOOLKIT_EXPECT_STR_EQ(handle.Result(), dst[i]);
	}
}

TOOLKIT_TEST_CASE(HMAC_SHA384, String)
{
	std::vector<std::string> src{ "123", "abc", ";'.", "#$%" };
	std::vector<std::string> dst
	{
		"A534F68F5CFAD559B6C2B65771C30016E853DFB678909790397938BC24B8985FA561BC3B28145560C0D3D2A59240C248",
		"F2BD99E06F5E07F84C7E3AD9F8A68E4D3AA9A0B2877CA833381584096FBEDCA96FC0E05767EFECA98ED79D98E8EB3632",
		"6C61290A6D46A20E4E261B116DB3752521BCADBA041D527E5E44E9D547CB6787A70748A45DEEA5E96444A3166625862E",
		"366694204A5E70877A8D65D4AA9A1737768D27831ADB8E43EC80D6E5D3908A71CA64CA79CDE3D422913D46E770A18DD2"
	};

	tinyToolkit::hash::HMAC_SHA384 handle{ };

	handle.SetKey("fuck");

	for (std::size_t i = 0; i < 4; ++i)
	{
		handle.Append(src[i]);

		TOOLKIT_EXPECT_STR_EQ(handle.Result(), dst[i]);
	}
}

TOOLKIT_TEST_CASE(HMAC_SHA384, Char_Length)
{
	std::vector<std::string> src{ "123456", "abcdef", ";'.,/]", "#$%^&*" };
	std::vector<std::string> dst
	{
		"A534F68F5CFAD559B6C2B65771C30016E853DFB678909790397938BC24B8985FA561BC3B28145560C0D3D2A59240C248",
		"F2BD99E06F5E07F84C7E3AD9F8A68E4D3AA9A0B2877CA833381584096FBEDCA96FC0E05767EFECA98ED79D98E8EB3632",
		"6C61290A6D46A20E4E261B116DB3752521BCADBA041D527E5E44E9D547CB6787A70748A45DEEA5E96444A3166625862E",
		"366694204A5E70877A8D65D4AA9A1737768D27831ADB8E43EC80D6E5D3908A71CA64CA79CDE3D422913D46E770A18DD2"
	};

	tinyToolkit::hash::HMAC_SHA384 handle{ };

	handle.SetKey("fuck");

	for (std::size_t i = 0; i < 4; ++i)
	{
		handle.Append(src[i].c_str(), 3);

		TOOLKIT_EXPECT_STR_EQ(handle.Result(), dst[i]);
	}
}

TOOLKIT_TEST_CASE(HMAC_SHA384, UChar_Length)
{
	std::vector<std::string> src{ "123456", "abcdef", ";'.,/]", "#$%^&*" };
	std::vector<std::string> dst
	{
		"A534F68F5CFAD559B6C2B65771C30016E853DFB678909790397938BC24B8985FA561BC3B28145560C0D3D2A59240C248",
		"F2BD99E06F5E07F84C7E3AD9F8A68E4D3AA9A0B2877CA833381584096FBEDCA96FC0E05767EFECA98ED79D98E8EB3632",
		"6C61290A6D46A20E4E261B116DB3752521BCADBA041D527E5E44E9D547CB6787A70748A45DEEA5E96444A3166625862E",
		"366694204A5E70877A8D65D4AA9A1737768D27831ADB8E43EC80D6E5D3908A71CA64CA79CDE3D422913D46E770A18DD2"
	};

	tinyToolkit::hash::HMAC_SHA384 handle{ };

	handle.SetKey("fuck");

	for (std::size_t i = 0; i < 4; ++i)
	{
		handle.Append(reinterpret_cast<const uint8_t *>(src[i].c_str()), 3);

		TOOLKIT_EXPECT_STR_EQ(handle.Result(), dst[i]);
	}
}

TOOLKIT_TEST_CASE(HMAC_SHA384, String_Length)
{
	std::vector<std::string> src{ "123456", "abcdef", ";'.,/]", "#$%^&*" };
	std::vector<std::string> dst
	{
		"A534F68F5CFAD559B6C2B65771C30016E853DFB678909790397938BC24B8985FA561BC3B28145560C0D3D2A59240C248",
		"F2BD99E06F5E07F84C7E3AD9F8A68E4D3AA9A0B2877CA833381584096FBEDCA96FC0E05767EFECA98ED79D98E8EB3632",
		"6C61290A6D46A20E4E261B116DB3752521BCADBA041D527E5E44E9D547CB6787A70748A45DEEA5E96444A3166625862E",
		"366694204A5E70877A8D65D4AA9A1737768D27831ADB8E43EC80D6E5D3908A71CA64CA79CDE3D422913D46E770A18DD2"
	};

	tinyToolkit::hash::HMAC_SHA384 handle{ };

	handle.SetKey("fuck");

	for (std::size_t i = 0; i < 4; ++i)
	{
		handle.Append(src[i], 3);

		TOOLKIT_EXPECT_STR_EQ(handle.Result(), dst[i]);
	}
}
