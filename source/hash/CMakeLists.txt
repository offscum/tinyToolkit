#
# 项目名
#
IF(CMAKE_BUILD_TYPE STREQUAL Debug)

	SET(PROGRAM_NAME		tinyToolkit_hash_d)
	SET(PROGRAM_NAME_SHARED tinyToolkit_hash_d)
	SET(PROGRAM_NAME_STATIC tinyToolkit_hash_static_d)

ELSE()

	SET(PROGRAM_NAME		tinyToolkit_hash)
	SET(PROGRAM_NAME_SHARED tinyToolkit_hash)
	SET(PROGRAM_NAME_STATIC tinyToolkit_hash_static)

ENDIF()


#
# 设置库文件生成目录
#
IF(WIN32)

	SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)

ELSE()

	SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)

ENDIF()


#
# 递归当前目录获取源文件
#
RECURSE_SOURCE_FILE(SOURCE_FILES)


#
# 链接源文件
#
ADD_LIBRARY(${PROGRAM_NAME_SHARED} SHARED ${SOURCE_FILES})
ADD_LIBRARY(${PROGRAM_NAME_STATIC} STATIC ${SOURCE_FILES})


#
# 指定输出名称
#
IF(WIN32)

	SET_TARGET_PROPERTIES(${PROGRAM_NAME_SHARED} PROPERTIES OUTPUT_NAME ${PROGRAM_NAME})
	SET_TARGET_PROPERTIES(${PROGRAM_NAME_STATIC} PROPERTIES OUTPUT_NAME ${PROGRAM_NAME}.a)

ELSE()

	SET_TARGET_PROPERTIES(${PROGRAM_NAME_SHARED} PROPERTIES OUTPUT_NAME ${PROGRAM_NAME})
	SET_TARGET_PROPERTIES(${PROGRAM_NAME_STATIC} PROPERTIES OUTPUT_NAME ${PROGRAM_NAME})

ENDIF()


#
# 使动态库和静态库同时存在
#
SET_TARGET_PROPERTIES(${PROGRAM_NAME_SHARED} PROPERTIES CLEAN_DIRECT_OUTPUT 1)
SET_TARGET_PROPERTIES(${PROGRAM_NAME_STATIC} PROPERTIES CLEAN_DIRECT_OUTPUT 1)


#
# 指定动态库版本
#
SET_TARGET_PROPERTIES(${PROGRAM_NAME_SHARED} PROPERTIES VERSION ${LIBRARY_VERSION})


#
# 安装库文件
#
INSTALL(TARGETS ${PROGRAM_NAME_SHARED} ${PROGRAM_NAME_STATIC} DESTINATION lib)


#
# 安装头文件
#
INSTALL(DIRECTORY ${CMAKE_CURRENT_LIST_DIR} DESTINATION include/tinyToolkit FILES_MATCHING PATTERN "*.h")
